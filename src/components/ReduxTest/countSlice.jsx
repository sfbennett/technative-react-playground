import { createSlice } from "@reduxjs/toolkit";

// Create a Count slice
// Include: a string name to identify the slice, an initial slice state value, and one or more reducer functions
// Below, the key is the name of the action, and the value is the reducer function
// (Reducer function defines how the state can be updated)
export const countSlice = createSlice({
  name: "count",
  initialState: {
    value: 0,
  },
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Reducer function to describe how the state should change
    // We're increasing the 'value' property of our state by the amount specified in the payload of the action
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
});

// Redux toolkit (above) allows us to write 'mutating' logic in reducers, using the Immer library!
// Redux alone requires that we write all state updates immutably by making copies of data and updating the copies.

// Exports action creators generated by Redux toolkit
export const { increment, decrement, incrementByAmount } = countSlice.actions;
// Exports the reducer function as the default export
export default countSlice.reducer;
